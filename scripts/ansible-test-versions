#!/bin/env python

import os
import sys
import subprocess
import argparse
from pprint import pprint

DEVELDIR = "/var/cache/ansible/ansible.checkout.clean"
BASEDIR = "/var/cache/ansible/version_checkouts"
LOGFILE = "returncodes.txt"

def run_command(args, env=None, capture=False, shell=True):
    kwargs = {'shell': True}
    if capture:
        kwargs['stdout'] = subprocess.PIPE
        kwargs['stderr'] = subprocess.PIPE
    if env:
        kwargs['env'] = env
    p = subprocess.Popen(args, **kwargs)

    '''
    if not capture:
        p = subprocess.Popen(args, shell=True)
    else:
        p = subprocess.Popen(args, shell=True,
                             stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             env=env)
    '''
    (so, se) = p.communicate()
    return (p.returncode, so, se)

def test_version(version, params):
    '''Run a test script through hacking'''
    if version.startswith('v'):
        version_dir = os.path.join(BASEDIR, 'ansible.%s' % version)
    else:
        version_dir = DEVELDIR
    hacking_script = os.path.join(version_dir, 'hacking', 'env-setup')
    command = 'source %s >/dev/null 2>&1 ; %s' % (hacking_script, params)
    #print(command)
    #command = 'source %s >/dev/null 2>&1 ; ansible --version' % (hacking_script)
    #import epdb; epdb.st()
    env = os.environ.copy()
    env['ANSIBLE_TEST_VERSION'] = version
    print ('# %s' % command)
    (rc, so, se) = run_command(command, capture=False, env=env)
    return rc

def list_versions(args):
    if args.usecache:
        command = 'ansible-list-versions usecache'
    else:
        command = 'ansible-list-versions'
    (rc, so, se) = run_command(command, capture=True)
    try:
        versions = so.split('\n')
    except TypeError:
        versions = so.decode('utf-8').split('\n')
    versions = [x.strip() for x in versions if x.strip()]
    return versions

def match_version(inversion, versions):
    '''Get the best match for the input version'''
    rversions = [x for x in versions]
    rversions = reversed(rversions)
    this_version = None
    for x in rversions:
        if x.startswith('v' + str(inversion)):
            this_version = x
            break
    return this_version

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--usecache', action='store_true',
                        help='do not pull latest ansible commits')
    parser.add_argument('--start', help='skip testing versions up to this version')
    parser.add_argument('inputs', nargs='+', help='[version] testscript')
    args = parser.parse_args()

    ansible_versions = list_versions(args)

    if args.start:
        av_tmp = []
        keep = False
        for av in ansible_versions:
            if av.startswith('v' + str(args.start)):
                keep = True
            if keep:
                av_tmp.append(av)
        ansible_versions = [x for x in av_tmp]
        #import epdb; epdb.st()

    # Test one version or test them all? ...
    test_script = None
    test_versions = []
    if len(args.inputs) == 1:
        test_versions = [x for x in ansible_versions]
        test_script = args.inputs[0]
    else:
        this_version = args.inputs[0]
        if this_version != 'devel':
            this_version = match_version(this_version, ansible_versions)
        test_versions.append(this_version)
        test_script = args.inputs[1]

    if os.path.isfile(test_script):
        if not os.access(test_script, os.X_OK):
            os.chmod(test_script, 0o700)
    else:
        test_script = 'bash %s' % test_script

    if os.path.isfile(LOGFILE):
        os.remove(LOGFILE)

    results = []
    for x in test_versions:
        print('###################################')
        print("# TESTING: %s" % x)
        print('###################################')
        rc = test_version(x, test_script)
        results.append((x, rc))
        with open(LOGFILE, 'a') as f:
            f.write('%s ; %s\n' % (x, rc))

    print('')
    print('###################################')
    print("#            RESULTS              #")
    print('###################################')
    pprint(results)

if __name__ == '__main__':
    main()

