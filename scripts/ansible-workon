#!/bin/bash

REPO=$1 #AP,AMC,AME
ID=$2
BASEDIR=~/workspace/issues

TICKETDIR="$BASEDIR/$REPO-$ID"
if [ ! -d $TICKETDIR ]; then
    mkdir -p $TICKETDIR
fi

cd $TICKETDIR

#########################################
#   INVENTORY 
#########################################

INVENTORYFILE=inventory
if [ ! -f $INVENTORYFILE ]; then
    echo "el6host" > inventory
    echo "el7host" >> inventory
    #echo "u1404 ansible_ssh_host=10.0.0.144" >> inventory
    #echo "f23host ansible_ssh_host=10.0.0.123" >> inventory
fi

#########################################
#   INVENTORY SCRIPT
#########################################

cat << EOF > inventory.py
#!/usr/bin/env python

import json
import sys
from pprint import pprint

INV = {}
INV['_meta'] = {'hostvars': {}}

groups = ['one', 'two', 'three']
hosts = ['foo', 'bar', 'baz']

for idx, group in enumerate(groups):
    INV[group] = {}
    INV[group]['children'] = []
    INV[group]['vars'] = {}
    INV[group]['hosts'] = [hosts[idx]]

for host in hosts:
    INV['_meta']['hostvars'][host] = {}
    INV['_meta']['hostvars'][host]['ansible_connection'] = 'local'

print json.dumps(INV, indent=2)
EOF
chmod +x inventory.py

#########################################
#   LARGE INVENTORY SCRIPT
#########################################

cat << EOF > inventory_scale.py
#!/usr/bin/env python

import json
import os
import sys
import uuid
from pprint import pprint

MAXHOSTS = os.environ.get('MAXHOSTS') or 10
if not isinstance(MAXHOSTS, int):
    MAXHOSTS = int(MAXHOSTS)

MAXITEMS = os.environ.get('MAXITEMS') or 10
if not isinstance(MAXITEMS, int):
    MAXITEMS = int(MAXITEMS)

INV = {}
INV['_meta'] = {'hostvars': {}}

groups = ['all']
hosts = ['x' + str(x) for x in range(0, MAXHOSTS)]

for idx, group in enumerate(groups):
    INV[group] = {}
    INV[group]['children'] = []
    INV[group]['vars'] = {}
    INV[group]['hosts'] = [x for x in hosts]

    for host in hosts:
        INV['_meta']['hostvars'][host] = {}
        INV['_meta']['hostvars'][host]['ansible_connection'] = 'local'
        INV['_meta']['hostvars'][host]['ansible_ssh_host'] = 'el7host'
        INV['_meta']['hostvars'][host]['ansible_ssh_user'] = 'root'
        INV['_meta']['hostvars'][host]['ansible_ssh_private_key_file'] = '~/.ssh/id_TEST'

        items = [str(x) for x in range(0, MAXITEMS)]
        items = ['/opt/test/%s' % host + x for x in items]
        items = [x + '/' + str(uuid.uuid4()) for x in items]
        INV['_meta']['hostvars'][host]['TESTLIST'] = items

print json.dumps(INV, indent=2)
EOF
chmod +x inventory_scale.py

#########################################
#   CONFIG
#########################################

cat << EOF > ansible.cfg
[defaults]
host_key_checking = False
EOF


#########################################
#   PLAYBOOK 
#########################################

cat << EOF > site.yml
- hosts: el6host
  connection: local
  gather_facts: False
  tasks:
    - shell: whoami
EOF

#########################################
#   TEST SCRIPT
#########################################

cat << EOF > test.sh
#!/bin/bash
export SSH_AUTH_SOCK=0
VERSION=\$(ansible --version | head -n1 | awk '{print \$2}')
ansible-playbook -vvvv -i inventory site.yml
RC=\$?
exit \$RC
EOF
chmod +x test.sh

#########################################
#   REPORT SCRIPT
#########################################

cat << EOF > report.sh
#!/bin/bash

# | Tables        | Are           | Cool  |
# | ------------- |:-------------:| -----:|
# | col 3 is      | right-aligned | $1600 |
# | col 2 is      | centered      |   $12 |
# | zebra stripes | are neat      |    $1 |

# nostate.log
# withstate.log

VERSIONS=\$(ansible-list-versions)

echo "version | rc"
echo "------ | ------"
for VERSION in \$VERSIONS; do
    #echo "## \$VERSION"
    STATERC=\$(fgrep "\$VERSION ;" returncodes.txt | tail -n1 | cut -d\; -f2)
    echo "\$VERSION | \$STATERC"
done
EOF
chmod +x report.sh
echo $TICKETDIR
echo $TICKETDIR > /tmp/ansible.workon
