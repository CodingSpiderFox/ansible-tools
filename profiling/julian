#!/bin/bash

#
# julian - run ansible in the most debugged form possible
#   * runs a specific version of ansible from a release tar or git
#   * straces ansible and it's child pids
#   * runs top in batch mode
#   * runs vmstat in batch mode
#   * stores the outputs in a common directory
#
# how to use this script:
#   ANSIBLE_VERSION=<VERSION> ./julian <ANSIBLE_PLAYBOOK_ARGS>
# example:
#   ANSIBLE_VERSION=ansible-2.7.5 ./vrun.sh -i inventory -c local site.yml
#

#
# kill any background pids on exit
#

if [[ $JULIAN_TRAP -ne 0 ]]; then
    trap "kill 0" exit
fi

#
# globals
#

CACHE="${HOME}/.ansible/vcache"
TARCACHE="$CACHE/tars"
EXTRACTCACHE="$CACHE/extracted"
echo "# EXTRACTCACHE $EXTRACTCACHE"

#
# the release tarballs are stored here
#

if [[ ! -d $TARCACHE ]]; then
    mkdir -p $TARCACHE
fi
if [[ ! -d $EXTRACTCACHE ]]; then
    mkdir -p $EXTRACTCACHE/devel
fi

#
# download the release tarballs from releases
#

download_versions() {
    if [ "$#" -eq 0 ]; then
        echo "# CHECKING OUT DEVEL"
        if [ ! -d $EXTRACTCACHE/devel ]; then
            git clone https://github.com/ansible/ansible $EXTRACTCACHE/devel
        else
            echo "# REBASE DEVEL"
            cd $EXTRACTCACHE/devel
            git pull --rebase origin devel
            cd -
        fi
    elif [[ $1 != "ansible"* ]]; then
        echo "# GET HASH $1"
        if [ ! -d $EXTRACTCACHE/$1 ]; then
            if [ ! -d $EXTRACTCACHE/devel ]; then
                git clone https://github.com/ansible/ansible $EXTRACTCACHE/devel
            else
                cd $EXTRACTDIR/devel
                git pull --rebase origin devel
                cd -
            fi
            #mkdir $EXTRACTCACHE/$1
            #git clone https://github.com/ansible/ansible $EXTRACTCACHE/$1
            cp -Rp $EXTRACTDIR/devel $EXTRACTCACHE/$1
            cd $EXTRACTCACHE/$1
            git checkout $1
            cd -
        fi
    else
        echo "# GET LIST OF RELEASES"
        URL="https://releases.ansible.com/ansible"
        curl -o $CACHE/releases.txt ${URL}/
        TARS=$(egrep -o 'href=.*\.gz"' $CACHE/releases.txt | sed -e 's/href=//g' -e 's/\"//g' | egrep -v latest | fgrep $1)
        for TAR in $TARS; do
            TARDST="$TARCACHE/$TAR"
            TARSRC="$URL/$TAR"
            if [[ ! -f $TARDST ]]; then
                echo "# DOWNLOAD $TARSRC"
                curl --silent -o $TARDST $TARSRC
                #curl -o $TARDST $TARSRC
            fi
        done
    fi
}

#
# extract the releases
#

extract_versions() {
    for TAR in $(ls $TARCACHE); do
        #echo $TAR
        DST="$EXTRACTCACHE/$(echo $TAR | sed 's/\.tar\.gz//')"
        #echo $DST
        if [[ ! -d $DST ]]; then
            tar xzf $TARCACHE/$TAR -C $EXTRACTCACHE
        fi
    done
}

#
# not all versions had a hacking script
#

create_hacking() {
    HACKING_URL=https://raw.githubusercontent.com/ansible/ansible/devel/hacking/env-setup
    for TAR in $(ls $TARCACHE); do
        #echo $TAR
        DST="$EXTRACTCACHE/$(echo $TAR | sed 's/\.tar\.gz//')/hacking"
        #echo $DST
        if [[ ! -d $DST ]]; then
            mkdir -p $DST
            #curl --silent -o $DST/env-setup $HACKING_URL
            #cp $EXTRACTCACHE/devel/hacking/env-setup $DST/env-setup
        fi
        if [[ ! -f $DST/env-setup ]]; then
            #curl --silent -o $DST/env-setup $HACKING_URL
            cp $EXTRACTCACHE/devel/hacking/env-setup $DST/env-setup
        fi
    done
}

#
# get or set the version and then download it
#

if [[ -z "$ANSIBLE_VERSION" ]]; then
    echo "# NO VERSION SPECIFIED"
    if [[ -f $CACHE/version.lock ]]; then
        ANSIBLE_VERSION=$(cat $CACHE/version.lock)
        download_versions $ANSIBLE_VERSION
        extract_versions
        create_hacking
    else
        download_versions
        extract_versions
        create_hacking
        ANSIBLE_VERSION=$(ls $EXTRACTCACHE | egrep -e 'ansible-' -e 'devel' | tail -n1 | sed 's/ansible-//g')
    fi
else
    echo "# $ANSIBLE_VERSION WAS SET"
    download_versions $ANSIBLE_VERSION
    extract_versions
    create_hacking
fi

echo "# VERSION SET: $ANSIBLE_VERSION"
echo "# SOURCING $EXTRACTCACHE/$ANSIBLE_VERSION/hacking/env-setup"
source $EXTRACTCACHE/$ANSIBLE_VERSION/hacking/env-setup
HACKING_VERSION=$(ansible --version | head -n1 | awk '{print $2}')
echo "# HACKING VERSION: $HACKING_VERSION"

if [[ -z $HACKING_VERSION ]]; then
    echo "NO HACKING VERSION WAS SET!!!"
    exit 1
fi

#
# build args for the run
#

RESDIR="jobresults.${HACKING_VERSION}.${ANSIBLE_VERSION}"
STRACEDIR="$RESDIR/strace.out"
if [[ $ANSIBLE_STRACE -eq 0 ]]; then
    STRACECMD=""
else
    STRACECMD="strace -D -s 5000 -ff -ttt -v -T -o $STRACEDIR/pid"
fi
STDOUTLOGFILE="$RESDIR/stdout.log"

#
# cleanup and prep
#

rm -rf $RESDIR
mkdir -p $RESDIR
mkdir -p $STRACEDIR

#
# set ansible cfg
#

if [[ $JULIAN_DEBUG -ne 0 ]]; then
    export ANSIBLE_DEBUG=1
fi
if [[ $JULIAN_SYSLOG -ne 0 ]]; then
    export ANSIBLE_LOG_PATH=$RESDIR/syslog.log
fi

#
# turn on/off verbose mode
#

if [[ $JULIAN_VERBOSE -ne 0 ]]; then
    VERBOSE="-vvvv"
else
    VERBOSE=""
fi

#
# turn on/off baseline
#

if [[ $JULIAN_BASELINE -ne 0 ]]; then
    #echo "turning on baseline"
    export BASELINE_WRITE_JSON=1
    export BASELINE_JSON_FILE=$RESDIR/baseline.json
fi

#
# keep track of what this is
#

ansible --version > $RESDIR/version.txt

#
# start vmstat
#
if [[ $JULIAN_VMSTAT -ne 0 ]]; then
    echo "# starting vmstat"
    rm -f $RESDIR/vmstat.log
    vmstat -t 1 >> $RESDIR/vmstat.log &
fi

#
# start top
#
if [[ $JULIAN_TOP -ne 0 ]]; then
    echo "# starting top"
    rm -f $RESDIR/top.log
    top -d 1 -b >> $RESDIR/top.log &
fi

#
# run ansible
#

$STRACECMD ansible-playbook $VERBOSE $@ | tee -a $STDOUTLOGFILE

echo "RC: $?"
#ps aux | fgrep -i vmstat | awk '{print $2}' | xargs kill
#ps aux | fgrep -i top | awk '{print $2}' | xargs kill

